generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CONSUMER // 참새
  SELLER // 어미새
  ADMIN
  USER
}

enum UserLevel {
  BEGINNER_SPARROW
  GOOD_SPARROW
  BEST_SPARROW
  LEADER_SPARROW
  VIP_SPARROW
  BEGINNER_MOTHER_BIRD
  GOOD_MOTHER_BIRD
  BEST_MOTHER_BIRD
  LEADER_MOTHER_BIRD
  VIP_MOTHER_BIRD
}

enum PurchaseStatus {
  DRAFT // 임시저장
  RECRUITING // 참여자 모집 중
  BIDDING // 입찰 진행 중
  VOTING // 투표 진행 중
  CONFIRMED // 낙찰 완료
  IN_PROGRESS // 거래 진행 중
  COMPLETED // 완료
  CANCELLED // 취소됨
}

enum BidStatus {
  PENDING // 입찰 중
  ACCEPTED // 낙찰됨
  REJECTED // 거절됨
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PenaltyType {
  NO_SHOW
  LATE_PARTICIPATION
  CANCELLATION
  FRAUDULENT_ACTIVITY
}

enum ProductCategory {
  ELECTRONICS
  HOME_APPLIANCE
  COMMUNICATION
  RENTAL
  FASHION
  FOOD
  TRAVEL
  ETC
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                     String                 @id @default(cuid())
  name                   String?
  email                  String?                @unique
  emailVerified          DateTime?
  image                  String?
  password               String?
  role                   UserRole               @default(USER)
  level                  UserLevel              @default(BEGINNER_SPARROW)
  nickname               String?
  phone                  String?
  businessNumber         String?                @unique
  businessLicense        String?
  participationCount     Int                    @default(0)
  penaltyCount           Int                    @default(0)
  penaltyEndTime         DateTime?
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  points                 Int                    @default(0)
  bidCount               Int                    @default(0)
  rating                 Float?
  accounts               Account[]
  sessions               Session[]
  groupPurchases         GroupPurchase[]        @relation("Creator")
  participants           Participant[]
  notifications          Notification[]
  votes                  Vote[]
  reviews                Review[]
  inquiries              Inquiry[]
  bids                   Bid[]
  messages               Message[]
  profileCompleteness    Int                    @default(0)
  lastProfileUpdateAt    DateTime?
  penaltyPoints          Int                    @default(0)
  reputationScore        Float                  @default(100.0)
  consecutiveCompletions Int                    @default(0)
  totalGroupPurchases    Int                    @default(0)
  successfulPurchases    Int                    @default(0)
  cancelledPurchases     Int                    @default(0)
  permissions            Json?
  twoFactorEnabled       Boolean                @default(false)
  lastLoginAt            DateTime?
  socialLinks            Json?
  identityVerified       Boolean                @default(false)
  verificationDocuments  VerificationDocument[]
  penalties              UserPenalty[]
  likes                  Like[]

  @@index([email])
  @@index([phone])
}

model VerificationDocument {
  id                 String             @id @default(cuid())
  userId             String
  user               User               @relation(fields: [userId], references: [id])
  documentType       String
  documentUrl        String
  verificationStatus VerificationStatus @default(PENDING)
  submittedAt        DateTime           @default(now())
  reviewedAt         DateTime?
  reviewerNotes      String?
}

model GroupPurchase {
  id                  String         @id @default(cuid())
  title               String
  description         String
  imageUrl            String?
  targetPrice         Float
  endTime             DateTime?
  price               Float?
  likes               Like[]
  minParticipants     Int
  maxParticipants     Int
  currentParticipants Int            @default(0)
  status              PurchaseStatus @default(DRAFT)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  auctionStartTime    DateTime?
  auctionEndTime      DateTime?
  voteStartTime       DateTime?
  voteEndTime         DateTime?
  voteThreshold       Float          @default(0.5)
  creatorId           String
  creator             User           @relation("Creator", fields: [creatorId], references: [id])
  participants        Participant[]
  bids                Bid[]
  votes               Vote[]
  messages            Message[]
  reviews             Review[]
  minParticipationScore   Float?
  maxPenaltyAllowed       Int?
  rejectionCount          Int       @default(0)
  successRate             Float     @default(0.0)
  participationHistory    Json?
  auctionRules           Json?
  votingThresholdOverride Boolean   @default(false)
  category               ProductCategory @default(ETC)
  subCategory            String?    @default("")
  popularity             Float      @default(0.0)
  remainingTime          DateTime?
  participantCount       Int        @default(0)

  @@index([creatorId])
  @@index([status])
}

model Like {
  id              String        @id @default(cuid())
  groupPurchaseId String
  userId          String
  groupPurchase   GroupPurchase @relation(fields: [groupPurchaseId], references: [id])
  user            User          @relation(fields: [userId], references: [id])

  @@index([groupPurchaseId])
  @@index([userId])
}

model Participant {
  id              String        @id @default(cuid())
  userId          String
  groupPurchaseId String
  joinedAt        DateTime      @default(now())
  status          String        @default("PENDING")
  user            User          @relation(fields: [userId], references: [id])
  groupPurchase   GroupPurchase @relation(fields: [groupPurchaseId], references: [id])

  @@unique([userId, groupPurchaseId])
  @@index([userId])
  @@index([groupPurchaseId])
}

model Bid {
  id          String    @id @default(cuid())
  price       Int
  description String
  status      BidStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  sellerId    String
  groupPurchaseId String
  seller      User          @relation(fields: [sellerId], references: [id])
  groupPurchase GroupPurchase @relation(fields: [groupPurchaseId], references: [id])
  bidderReputationScore  Float?
  competitivenessScore   Float?
  isAnonymousBid         Boolean   @default(false)
  bidHistory             Json?
  disqualificationReason String?

  @@index([sellerId])
  @@index([groupPurchaseId])
}

model Vote {
  id              String        @id @default(cuid())
  groupPurchaseId String
  groupPurchase   GroupPurchase @relation(fields: [groupPurchaseId], references: [id])
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  vote            Boolean
  createdAt       DateTime      @default(now())

  @@unique([userId, groupPurchaseId])
  @@index([groupPurchaseId])
  @@index([userId])
}

model Review {
  id        String   @id @default(cuid())
  content   String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  groupPurchaseId String
  groupPurchase   GroupPurchase @relation(fields: [groupPurchaseId], references: [id])

  @@index([userId])
  @@index([groupPurchaseId])
}

model Inquiry {
  id         String   @id @default(cuid())
  title      String
  content    String
  answer     String?
  isAnswered Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  groupPurchaseId String
  groupPurchase   GroupPurchase @relation(fields: [groupPurchaseId], references: [id])

  @@index([userId])
  @@index([groupPurchaseId])
  @@index([createdAt])
}

model UserPenalty {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  penaltyType PenaltyType
  severity    Int
  reason      String
  startAt     DateTime    @default(now())
  endAt       DateTime
  isActive    Boolean     @default(true)
}

model FAQ {
  id        String   @id @default(cuid())
  category  String
  question  String
  answer    String   @db.Text
  priority  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
